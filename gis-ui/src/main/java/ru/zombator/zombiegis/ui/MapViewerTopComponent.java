package ru.zombator.zombiegis.ui;

import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

import com.bbn.openmap.Layer;
import com.bbn.openmap.LayerHandler;
import com.bbn.openmap.MapHandler;
import com.bbn.openmap.MouseDelegator;
import com.bbn.openmap.event.PanMouseMode;
import com.bbn.openmap.layer.GraticuleLayer;
import java.io.IOException;
import java.io.ObjectInput;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;

import ru.zombator.zombiegis.GISException;
import ru.zombator.zombiegis.model.ObjMap;
import ru.zombator.zombiegis.ui.layer.EmbeddedShapeLayer;
import ru.zombator.zombiegis.ui.layer.ObjectLayer;

/**
 * Окно просмотрщика карты.
 *
 * @author nvamelichev.
 */
@TopComponent.Description(
        preferredID = "MapViewerTopComponent",
        iconBase="ru/zombator/zombiegis/ui/map.png",
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@Messages({
    "# {0} - map name",
    "MapViewerTopComponent.openMapError=Could not open map \"{0}\".",

    "ObjectLayer.displayName=Objects",
    "EmbeddedShapeLayer.displayName=Coutour Map",
    "GraticuleLayer.displayName=Graticule",
})
public final class MapViewerTopComponent extends TopComponent {
    private static final Logger LOG = Logger.getLogger(MapViewerTopComponent.class.getName());

    private final ObjMap map;

    public MapViewerTopComponent(ObjMap map) {
        this.map = map;

        // чтобы положение окна запоминалось
        putClientProperty("KeepNonPersistentTCInModelWhenClosed", true);

        initComponents();
        initMapPanel();

        setName(map.getName());
    }

    private void initMapPanel() {
        initLayers();
        initMouseModes();
    }

    private void initLayers() {
        mapHandler().add(new LayerHandler());
        addLayer(new EmbeddedShapeLayer(), Bundle.EmbeddedShapeLayer_displayName());
        addLayer(new GraticuleLayer(), Bundle.GraticuleLayer_displayName());
        addLayer(new ObjectLayer(map), Bundle.ObjectLayer_displayName());
    }

    private void addLayer(Layer layer, String displayName) {
        layer.setName(displayName);
        mapHandler().add(layer);
    }

    private void initMouseModes() {
        MouseDelegator delegator = new MouseDelegator();
        mapHandler().add(delegator);

        delegator.addMouseMode(new PanMouseMode());
    }

    private MapHandler mapHandler() {
        return mapPanel.getMapHandler();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mapPanel = new com.bbn.openmap.gui.OverlayMapPanel();

        setLayout(new java.awt.BorderLayout());
        add(mapPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.bbn.openmap.gui.OverlayMapPanel mapPanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        try {
            map.open();
        } catch (GISException e) {
            LogRecord rec = new LogRecord(Level.INFO, "Could not open map: {0}");
            rec.setParameters(new Object[]{map});
            rec.setThrown(e);
            LOG.log(rec);

            MsgBox.error(Bundle.MapViewerTopComponent_openMapError(map.getName()));

            close();
        }
    }

    @Override
    public void componentClosed() {
        map.close();

        mapPanel.dispose();
        mapPanel.removeAll();
    }
}
